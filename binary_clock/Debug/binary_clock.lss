
binary_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c8  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008e  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c8  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000160  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000059d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	25 d0       	rcall	.+74     	; 0x7a <main>
  30:	28 c0       	rjmp	.+80     	; 0x82 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <init_timer>:
#include <avr/io.h>
#include <avr/interrupt.h>

void init_timer(void){
	// Configure timer interrupt
	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
  34:	89 b7       	in	r24, 0x39	; 57
  36:	80 64       	ori	r24, 0x40	; 64
  38:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;	// Reset timer counter
  3a:	1d bc       	out	0x2d, r1	; 45
  3c:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1 << WGM12);	// Set to CTC mode on OCR1A
  3e:	8e b5       	in	r24, 0x2e	; 46
  40:	88 60       	ori	r24, 0x08	; 8
  42:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10) | (1 << CS11);	// Set prescaler to 1/64
  44:	8e b5       	in	r24, 0x2e	; 46
  46:	83 60       	ori	r24, 0x03	; 3
  48:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15624;			// Compare value of register
  4a:	88 e0       	ldi	r24, 0x08	; 8
  4c:	9d e3       	ldi	r25, 0x3D	; 61
  4e:	9b bd       	out	0x2b, r25	; 43
  50:	8a bd       	out	0x2a, r24	; 42
	sei(); // Enable global interrupts
  52:	78 94       	sei
  54:	08 95       	ret

00000056 <__vector_4>:
}
ISR(TIMER1_COMPA_vect){
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
	PORTB ^= 0x01;
  64:	98 b3       	in	r25, 0x18	; 24
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	89 27       	eor	r24, r25
  6a:	88 bb       	out	0x18, r24	; 24
}
  6c:	9f 91       	pop	r25
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <main>:
	
int main(void)
{
	// Set outputs
	DDRB |= 0x01;	// Pins on PORTB
  7a:	b8 9a       	sbi	0x17, 0	; 23
	PORTB = 0x00; // Set initial value of output port
  7c:	18 ba       	out	0x18, r1	; 24
	
	init_timer();
  7e:	da df       	rcall	.-76     	; 0x34 <init_timer>
 
	while (1)
    {
    }
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x6>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
