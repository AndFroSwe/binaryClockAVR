
binary_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014a  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000aa  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000148  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019b  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	99 c0       	rjmp	.+306    	; 0x13c <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a8 36       	cpi	r26, 0x68	; 104
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	1d d0       	rcall	.+58     	; 0x7a <main>
  40:	f1 c0       	rjmp	.+482    	; 0x224 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <init_ports>:
	return 0;
}

void init_ports(void){
	// Set outputs
	DDRB |= 0x1f;	// Pins on PORTB
  44:	87 b3       	in	r24, 0x17	; 23
  46:	8f 61       	ori	r24, 0x1F	; 31
  48:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0x07;	// Pins on PORTC
  4a:	84 b3       	in	r24, 0x14	; 20
  4c:	87 60       	ori	r24, 0x07	; 7
  4e:	84 bb       	out	0x14, r24	; 20
	PORTB = 0x1f; // Set initial value of output port B
  50:	8f e1       	ldi	r24, 0x1F	; 31
  52:	88 bb       	out	0x18, r24	; 24
	PORTC = 0x1f; // Set initial value of output port C
  54:	85 bb       	out	0x15, r24	; 21
  56:	08 95       	ret

00000058 <init_timer>:
}

void init_timer(void){
	// Configure timer interrupt
	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
  58:	89 b7       	in	r24, 0x39	; 57
  5a:	80 64       	ori	r24, 0x40	; 64
  5c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;	// Reset timer counter
  5e:	1d bc       	out	0x2d, r1	; 45
  60:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1 << WGM12);	// Set to CTC mode on OCR1A
  62:	8e b5       	in	r24, 0x2e	; 46
  64:	88 60       	ori	r24, 0x08	; 8
  66:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10) | (1 << CS11);	// Set prescaler to 1/64
  68:	8e b5       	in	r24, 0x2e	; 46
  6a:	83 60       	ori	r24, 0x03	; 3
  6c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15624;			// Compare value of register
  6e:	88 e0       	ldi	r24, 0x08	; 8
  70:	9d e3       	ldi	r25, 0x3D	; 61
  72:	9b bd       	out	0x2b, r25	; 43
  74:	8a bd       	out	0x2a, r24	; 42
	sei(); // Enable global interrupts
  76:	78 94       	sei
  78:	08 95       	ret

0000007a <main>:
void update_minutes();


int main(void)
{
	init_ports();
  7a:	e4 df       	rcall	.-56     	; 0x44 <init_ports>
	init_timer();
  7c:	ed df       	rcall	.-38     	; 0x58 <init_timer>
 
	while (1)
    {
    }
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x4>

00000080 <update_minutes>:
	++TIME;
	update_minutes();	
}

void update_minutes(void){
	minutes_single = (TIME%60)%10;
  80:	60 91 64 00 	lds	r22, 0x0064
  84:	70 91 65 00 	lds	r23, 0x0065
  88:	80 91 66 00 	lds	r24, 0x0066
  8c:	90 91 67 00 	lds	r25, 0x0067
  90:	2c e3       	ldi	r18, 0x3C	; 60
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	87 d0       	rcall	.+270    	; 0x1a8 <__divmodsi4>
  9a:	2a e0       	ldi	r18, 0x0A	; 10
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	82 d0       	rcall	.+260    	; 0x1a8 <__divmodsi4>
  a4:	70 93 63 00 	sts	0x0063, r23
  a8:	60 93 62 00 	sts	0x0062, r22
	// Check each bit in the single minutes
	// Minutes, single minutes
	(minutes_single & 0x01) ? (PORTB &= ~(1 << PB0)): (PORTB |= (1 << PB0)) ;
  ac:	61 70       	andi	r22, 0x01	; 1
  ae:	77 27       	eor	r23, r23
  b0:	67 2b       	or	r22, r23
  b2:	11 f0       	breq	.+4      	; 0xb8 <update_minutes+0x38>
  b4:	c0 98       	cbi	0x18, 0	; 24
  b6:	01 c0       	rjmp	.+2      	; 0xba <update_minutes+0x3a>
  b8:	c0 9a       	sbi	0x18, 0	; 24
	(minutes_single & 0x02) ? (PORTB &= ~(1 << PB1)) : (PORTB |= (1 << PB1));
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	81 ff       	sbrs	r24, 1
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <update_minutes+0x46>
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <update_minutes+0x48>
  c6:	c1 9a       	sbi	0x18, 1	; 24
	(minutes_single & 0x04) ? (PORTB &= ~(1 << PB2)) : (PORTB |= (1 << PB2));
  c8:	80 91 62 00 	lds	r24, 0x0062
  cc:	82 ff       	sbrs	r24, 2
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <update_minutes+0x54>
  d0:	c2 98       	cbi	0x18, 2	; 24
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <update_minutes+0x56>
  d4:	c2 9a       	sbi	0x18, 2	; 24
	(minutes_single & 0x08) ? (PORTB &= ~(1 << PB3)) : (PORTB |= (1 << PB3));
  d6:	80 91 62 00 	lds	r24, 0x0062
  da:	83 ff       	sbrs	r24, 3
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <update_minutes+0x62>
  de:	c3 98       	cbi	0x18, 3	; 24
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <update_minutes+0x64>
  e2:	c3 9a       	sbi	0x18, 3	; 24
	// Minutes, tens of minutes
	minutes_tens = (TIME%60)/10;
  e4:	60 91 64 00 	lds	r22, 0x0064
  e8:	70 91 65 00 	lds	r23, 0x0065
  ec:	80 91 66 00 	lds	r24, 0x0066
  f0:	90 91 67 00 	lds	r25, 0x0067
  f4:	2c e3       	ldi	r18, 0x3C	; 60
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	55 d0       	rcall	.+170    	; 0x1a8 <__divmodsi4>
  fe:	2a e0       	ldi	r18, 0x0A	; 10
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	50 d0       	rcall	.+160    	; 0x1a8 <__divmodsi4>
 108:	30 93 61 00 	sts	0x0061, r19
 10c:	20 93 60 00 	sts	0x0060, r18
	// Check each bit in tens of minutes
	// Minutes, least significant
	(minutes_tens & 0x01) ? (PORTC &= ~(1 << PC0)) : (PORTC |= (1 << PC0));
 110:	21 70       	andi	r18, 0x01	; 1
 112:	33 27       	eor	r19, r19
 114:	23 2b       	or	r18, r19
 116:	11 f0       	breq	.+4      	; 0x11c <update_minutes+0x9c>
 118:	a8 98       	cbi	0x15, 0	; 21
 11a:	01 c0       	rjmp	.+2      	; 0x11e <update_minutes+0x9e>
 11c:	a8 9a       	sbi	0x15, 0	; 21
	(minutes_tens & 0x02) ? (PORTC &= ~(1 << PC1)) : (PORTC |= (1 << PC1));
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	81 ff       	sbrs	r24, 1
 124:	02 c0       	rjmp	.+4      	; 0x12a <update_minutes+0xaa>
 126:	a9 98       	cbi	0x15, 1	; 21
 128:	01 c0       	rjmp	.+2      	; 0x12c <update_minutes+0xac>
 12a:	a9 9a       	sbi	0x15, 1	; 21
	(minutes_tens & 0x04) ? (PORTC &= ~(1 << PC2)) : (PORTC |= (1 << PC2));
 12c:	80 91 60 00 	lds	r24, 0x0060
 130:	82 ff       	sbrs	r24, 2
 132:	02 c0       	rjmp	.+4      	; 0x138 <update_minutes+0xb8>
 134:	aa 98       	cbi	0x15, 2	; 21
 136:	08 95       	ret
 138:	aa 9a       	sbi	0x15, 2	; 21
 13a:	08 95       	ret

0000013c <__vector_4>:
	TCCR1B |= (1 << CS10) | (1 << CS11);	// Set prescaler to 1/64
	OCR1A = 15624;			// Compare value of register
	sei(); // Enable global interrupts
}

ISR(TIMER1_COMPA_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	++TIME;
 15e:	80 91 64 00 	lds	r24, 0x0064
 162:	90 91 65 00 	lds	r25, 0x0065
 166:	a0 91 66 00 	lds	r26, 0x0066
 16a:	b0 91 67 00 	lds	r27, 0x0067
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	a1 1d       	adc	r26, r1
 172:	b1 1d       	adc	r27, r1
 174:	80 93 64 00 	sts	0x0064, r24
 178:	90 93 65 00 	sts	0x0065, r25
 17c:	a0 93 66 00 	sts	0x0066, r26
 180:	b0 93 67 00 	sts	0x0067, r27
	update_minutes();	
 184:	7d df       	rcall	.-262    	; 0x80 <update_minutes>
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__divmodsi4>:
 1a8:	05 2e       	mov	r0, r21
 1aa:	97 fb       	bst	r25, 7
 1ac:	16 f4       	brtc	.+4      	; 0x1b2 <__divmodsi4+0xa>
 1ae:	00 94       	com	r0
 1b0:	0f d0       	rcall	.+30     	; 0x1d0 <__negsi2>
 1b2:	57 fd       	sbrc	r21, 7
 1b4:	05 d0       	rcall	.+10     	; 0x1c0 <__divmodsi4_neg2>
 1b6:	14 d0       	rcall	.+40     	; 0x1e0 <__udivmodsi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	02 d0       	rcall	.+4      	; 0x1c0 <__divmodsi4_neg2>
 1bc:	46 f4       	brtc	.+16     	; 0x1ce <__divmodsi4_exit>
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <__negsi2>

000001c0 <__divmodsi4_neg2>:
 1c0:	50 95       	com	r21
 1c2:	40 95       	com	r20
 1c4:	30 95       	com	r19
 1c6:	21 95       	neg	r18
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	4f 4f       	sbci	r20, 0xFF	; 255
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255

000001ce <__divmodsi4_exit>:
 1ce:	08 95       	ret

000001d0 <__negsi2>:
 1d0:	90 95       	com	r25
 1d2:	80 95       	com	r24
 1d4:	70 95       	com	r23
 1d6:	61 95       	neg	r22
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	8f 4f       	sbci	r24, 0xFF	; 255
 1dc:	9f 4f       	sbci	r25, 0xFF	; 255
 1de:	08 95       	ret

000001e0 <__udivmodsi4>:
 1e0:	a1 e2       	ldi	r26, 0x21	; 33
 1e2:	1a 2e       	mov	r1, r26
 1e4:	aa 1b       	sub	r26, r26
 1e6:	bb 1b       	sub	r27, r27
 1e8:	fd 01       	movw	r30, r26
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <__udivmodsi4_ep>

000001ec <__udivmodsi4_loop>:
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	ee 1f       	adc	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	a2 17       	cp	r26, r18
 1f6:	b3 07       	cpc	r27, r19
 1f8:	e4 07       	cpc	r30, r20
 1fa:	f5 07       	cpc	r31, r21
 1fc:	20 f0       	brcs	.+8      	; 0x206 <__udivmodsi4_ep>
 1fe:	a2 1b       	sub	r26, r18
 200:	b3 0b       	sbc	r27, r19
 202:	e4 0b       	sbc	r30, r20
 204:	f5 0b       	sbc	r31, r21

00000206 <__udivmodsi4_ep>:
 206:	66 1f       	adc	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	88 1f       	adc	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	1a 94       	dec	r1
 210:	69 f7       	brne	.-38     	; 0x1ec <__udivmodsi4_loop>
 212:	60 95       	com	r22
 214:	70 95       	com	r23
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	9b 01       	movw	r18, r22
 21c:	ac 01       	movw	r20, r24
 21e:	bd 01       	movw	r22, r26
 220:	cf 01       	movw	r24, r30
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
