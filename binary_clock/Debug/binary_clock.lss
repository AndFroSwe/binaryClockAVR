
binary_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d8  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b0  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e1  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f9  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_1>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ports>:
	return 0;
}

void init_ports(void){
	// Set outputs
	DDRB |= 0x1f;	// Pins on PORTB
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 61       	ori	r24, 0x1F	; 31
  94:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x87;	// Pins on PORTC
  96:	87 b1       	in	r24, 0x07	; 7
  98:	87 68       	ori	r24, 0x87	; 135
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;	// Pins on PORTD
  9c:	1a b8       	out	0x0a, r1	; 10
	PORTB |= 0x1f; // Set initial value of output port B
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8f 61       	ori	r24, 0x1F	; 31
  a2:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0x1f; // Set initial value of output port C
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	8f 61       	ori	r24, 0x1F	; 31
  a8:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PD2) | (1 << PD3); // Enable pullup resistor
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8c 60       	ori	r24, 0x0C	; 12
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <init_timer>:
}

void init_timer(void){
	// Configure timer interrupt
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  b2:	ef e6       	ldi	r30, 0x6F	; 111
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	TCNT1 = 0;	// Reset timer counter
  bc:	10 92 85 00 	sts	0x0085, r1
  c0:	10 92 84 00 	sts	0x0084, r1
	TCCR1B |= (1 << WGM12);	// Set to CTC mode on OCR1A
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10) | (1 << CS12);	// Set prescaler to 1/1024
  ce:	80 81       	ld	r24, Z
  d0:	85 60       	ori	r24, 0x05	; 5
  d2:	80 83       	st	Z, r24
	OCR1A = 58594;			// Compare value of register
  d4:	82 ee       	ldi	r24, 0xE2	; 226
  d6:	94 ee       	ldi	r25, 0xE4	; 228
  d8:	90 93 89 00 	sts	0x0089, r25
  dc:	80 93 88 00 	sts	0x0088, r24
  e0:	08 95       	ret

000000e2 <init_pin_interrupt>:
}

void init_pin_interrupt(void){
	// Configure interrupts on falling edge for INT0
	EICRA |= (1 << ISC01);
  e2:	e9 e6       	ldi	r30, 0x69	; 105
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
  ec:	80 81       	ld	r24, Z
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);		// Enable INT0 interrupt
  f2:	e8 9a       	sbi	0x1d, 0	; 29
	// Configure interrupts on falling edge for INT1
	EICRA |= (1 << ISC11);
  f4:	80 81       	ld	r24, Z
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC10);
  fa:	80 81       	ld	r24, Z
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);		// Enable INT0 interrupt
 100:	e9 9a       	sbi	0x1d, 1	; 29
 102:	08 95       	ret

00000104 <start_sleep>:
void init_sleep_mode(void){
	SMCR = 0x00;	// Set to idle mode
}

void start_sleep(void){
	SMCR |= (1 << SE);
 104:	83 b7       	in	r24, 0x33	; 51
 106:	81 60       	ori	r24, 0x01	; 1
 108:	83 bf       	out	0x33, r24	; 51
 10a:	08 95       	ret

0000010c <main>:
void start_sleep();


int main(void)
{
	init_ports();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <init_ports>
	init_timer();
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <init_timer>
	init_pin_interrupt();
 114:	0e 94 71 00 	call	0xe2	; 0xe2 <init_pin_interrupt>
	sei(); // Enable global interrupts
 118:	78 94       	sei
 
	while (1)
    {
		start_sleep();
 11a:	0e 94 82 00 	call	0x104	; 0x104 <start_sleep>
	}
 11e:	fd cf       	rjmp	.-6      	; 0x11a <main+0xe>

00000120 <__vector_2>:
	// Increase minutes
	TIME += 1;
	update_minutes();
}

ISR(INT1_vect) {
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
	// Increase hours
	TIME += 10;
 132:	80 91 04 01 	lds	r24, 0x0104
 136:	90 91 05 01 	lds	r25, 0x0105
 13a:	a0 91 06 01 	lds	r26, 0x0106
 13e:	b0 91 07 01 	lds	r27, 0x0107
 142:	0a 96       	adiw	r24, 0x0a	; 10
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 04 01 	sts	0x0104, r24
 14c:	90 93 05 01 	sts	0x0105, r25
 150:	a0 93 06 01 	sts	0x0106, r26
 154:	b0 93 07 01 	sts	0x0107, r27
	//update_hours();
}
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <update_minutes>:

void update_minutes(void){
	minutes_single = (TIME%60)%10;
 16a:	60 91 04 01 	lds	r22, 0x0104
 16e:	70 91 05 01 	lds	r23, 0x0105
 172:	80 91 06 01 	lds	r24, 0x0106
 176:	90 91 07 01 	lds	r25, 0x0107
 17a:	2c e3       	ldi	r18, 0x3C	; 60
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodsi4>
 186:	2a e0       	ldi	r18, 0x0A	; 10
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodsi4>
 192:	70 93 03 01 	sts	0x0103, r23
 196:	60 93 02 01 	sts	0x0102, r22
	// Check each bit in the single minutes
	// Minutes, single minutes
	(minutes_single & 0x01) ? (PORTB &= ~(1 << PB0)): (PORTB |= (1 << PB0)) ;
 19a:	61 70       	andi	r22, 0x01	; 1
 19c:	77 27       	eor	r23, r23
 19e:	67 2b       	or	r22, r23
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <update_minutes+0x3c>
 1a2:	28 98       	cbi	0x05, 0	; 5
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <update_minutes+0x3e>
 1a6:	28 9a       	sbi	0x05, 0	; 5
	(minutes_single & 0x02) ? (PORTB &= ~(1 << PB1)) : (PORTB |= (1 << PB1));
 1a8:	80 91 02 01 	lds	r24, 0x0102
 1ac:	81 ff       	sbrs	r24, 1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <update_minutes+0x4a>
 1b0:	29 98       	cbi	0x05, 1	; 5
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <update_minutes+0x4c>
 1b4:	29 9a       	sbi	0x05, 1	; 5
	(minutes_single & 0x04) ? (PORTB &= ~(1 << PB2)) : (PORTB |= (1 << PB2));
 1b6:	80 91 02 01 	lds	r24, 0x0102
 1ba:	82 ff       	sbrs	r24, 2
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <update_minutes+0x58>
 1be:	2a 98       	cbi	0x05, 2	; 5
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <update_minutes+0x5a>
 1c2:	2a 9a       	sbi	0x05, 2	; 5
	(minutes_single & 0x08) ? (PORTB &= ~(1 << PB3)) : (PORTB |= (1 << PB3));
 1c4:	80 91 02 01 	lds	r24, 0x0102
 1c8:	83 ff       	sbrs	r24, 3
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <update_minutes+0x66>
 1cc:	2b 98       	cbi	0x05, 3	; 5
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <update_minutes+0x68>
 1d0:	2b 9a       	sbi	0x05, 3	; 5
	// Minutes, tens of minutes
	minutes_tens = (TIME%60)/10;
 1d2:	60 91 04 01 	lds	r22, 0x0104
 1d6:	70 91 05 01 	lds	r23, 0x0105
 1da:	80 91 06 01 	lds	r24, 0x0106
 1de:	90 91 07 01 	lds	r25, 0x0107
 1e2:	2c e3       	ldi	r18, 0x3C	; 60
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodsi4>
 1ee:	2a e0       	ldi	r18, 0x0A	; 10
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodsi4>
 1fa:	30 93 01 01 	sts	0x0101, r19
 1fe:	20 93 00 01 	sts	0x0100, r18
	// Check each bit in tens of minutes
	// Minutes, least significant
	(minutes_tens & 0x01) ? (PORTC &= ~(1 << PC0)) : (PORTC |= (1 << PC0));
 202:	21 70       	andi	r18, 0x01	; 1
 204:	33 27       	eor	r19, r19
 206:	23 2b       	or	r18, r19
 208:	11 f0       	breq	.+4      	; 0x20e <update_minutes+0xa4>
 20a:	40 98       	cbi	0x08, 0	; 8
 20c:	01 c0       	rjmp	.+2      	; 0x210 <update_minutes+0xa6>
 20e:	40 9a       	sbi	0x08, 0	; 8
	(minutes_tens & 0x02) ? (PORTC &= ~(1 << PC1)) : (PORTC |= (1 << PC1));
 210:	80 91 00 01 	lds	r24, 0x0100
 214:	81 ff       	sbrs	r24, 1
 216:	02 c0       	rjmp	.+4      	; 0x21c <update_minutes+0xb2>
 218:	41 98       	cbi	0x08, 1	; 8
 21a:	01 c0       	rjmp	.+2      	; 0x21e <update_minutes+0xb4>
 21c:	41 9a       	sbi	0x08, 1	; 8
	(minutes_tens & 0x04) ? (PORTC &= ~(1 << PC2)) : (PORTC |= (1 << PC2));
 21e:	80 91 00 01 	lds	r24, 0x0100
 222:	82 ff       	sbrs	r24, 2
 224:	02 c0       	rjmp	.+4      	; 0x22a <update_minutes+0xc0>
 226:	42 98       	cbi	0x08, 2	; 8
 228:	08 95       	ret
 22a:	42 9a       	sbi	0x08, 2	; 8
 22c:	08 95       	ret

0000022e <__vector_11>:

void start_sleep(void){
	SMCR |= (1 << SE);
}

ISR(TIMER1_COMPA_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	++TIME;
 250:	80 91 04 01 	lds	r24, 0x0104
 254:	90 91 05 01 	lds	r25, 0x0105
 258:	a0 91 06 01 	lds	r26, 0x0106
 25c:	b0 91 07 01 	lds	r27, 0x0107
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 93 04 01 	sts	0x0104, r24
 26a:	90 93 05 01 	sts	0x0105, r25
 26e:	a0 93 06 01 	sts	0x0106, r26
 272:	b0 93 07 01 	sts	0x0107, r27
	update_minutes();
 276:	0e 94 b5 00 	call	0x16a	; 0x16a <update_minutes>
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_1>:

ISR(INT0_vect) {
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	// Increase minutes
	TIME += 1;
 2be:	80 91 04 01 	lds	r24, 0x0104
 2c2:	90 91 05 01 	lds	r25, 0x0105
 2c6:	a0 91 06 01 	lds	r26, 0x0106
 2ca:	b0 91 07 01 	lds	r27, 0x0107
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	a1 1d       	adc	r26, r1
 2d2:	b1 1d       	adc	r27, r1
 2d4:	80 93 04 01 	sts	0x0104, r24
 2d8:	90 93 05 01 	sts	0x0105, r25
 2dc:	a0 93 06 01 	sts	0x0106, r26
 2e0:	b0 93 07 01 	sts	0x0107, r27
	update_minutes();
 2e4:	0e 94 b5 00 	call	0x16a	; 0x16a <update_minutes>
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__divmodsi4>:
 30a:	05 2e       	mov	r0, r21
 30c:	97 fb       	bst	r25, 7
 30e:	1e f4       	brtc	.+6      	; 0x316 <__divmodsi4+0xc>
 310:	00 94       	com	r0
 312:	0e 94 9c 01 	call	0x338	; 0x338 <__negsi2>
 316:	57 fd       	sbrc	r21, 7
 318:	07 d0       	rcall	.+14     	; 0x328 <__divmodsi4_neg2>
 31a:	0e 94 a4 01 	call	0x348	; 0x348 <__udivmodsi4>
 31e:	07 fc       	sbrc	r0, 7
 320:	03 d0       	rcall	.+6      	; 0x328 <__divmodsi4_neg2>
 322:	4e f4       	brtc	.+18     	; 0x336 <__divmodsi4_exit>
 324:	0c 94 9c 01 	jmp	0x338	; 0x338 <__negsi2>

00000328 <__divmodsi4_neg2>:
 328:	50 95       	com	r21
 32a:	40 95       	com	r20
 32c:	30 95       	com	r19
 32e:	21 95       	neg	r18
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	4f 4f       	sbci	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255

00000336 <__divmodsi4_exit>:
 336:	08 95       	ret

00000338 <__negsi2>:
 338:	90 95       	com	r25
 33a:	80 95       	com	r24
 33c:	70 95       	com	r23
 33e:	61 95       	neg	r22
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	8f 4f       	sbci	r24, 0xFF	; 255
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	08 95       	ret

00000348 <__udivmodsi4>:
 348:	a1 e2       	ldi	r26, 0x21	; 33
 34a:	1a 2e       	mov	r1, r26
 34c:	aa 1b       	sub	r26, r26
 34e:	bb 1b       	sub	r27, r27
 350:	fd 01       	movw	r30, r26
 352:	0d c0       	rjmp	.+26     	; 0x36e <__udivmodsi4_ep>

00000354 <__udivmodsi4_loop>:
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	ee 1f       	adc	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	a2 17       	cp	r26, r18
 35e:	b3 07       	cpc	r27, r19
 360:	e4 07       	cpc	r30, r20
 362:	f5 07       	cpc	r31, r21
 364:	20 f0       	brcs	.+8      	; 0x36e <__udivmodsi4_ep>
 366:	a2 1b       	sub	r26, r18
 368:	b3 0b       	sbc	r27, r19
 36a:	e4 0b       	sbc	r30, r20
 36c:	f5 0b       	sbc	r31, r21

0000036e <__udivmodsi4_ep>:
 36e:	66 1f       	adc	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	1a 94       	dec	r1
 378:	69 f7       	brne	.-38     	; 0x354 <__udivmodsi4_loop>
 37a:	60 95       	com	r22
 37c:	70 95       	com	r23
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	bd 01       	movw	r22, r26
 388:	cf 01       	movw	r24, r30
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
