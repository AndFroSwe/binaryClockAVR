
binary_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001dc  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b0  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ec  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000191  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_1>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ports>:
	return 0;
}

void init_ports(void){
	// Set outputs
	DDRB |= 0x1f;	// Pins on PORTB
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 61       	ori	r24, 0x1F	; 31
  94:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x87;	// Pins on PORTC
  96:	87 b1       	in	r24, 0x07	; 7
  98:	87 68       	ori	r24, 0x87	; 135
  9a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;	// Pins on PORTD
  9c:	1a b8       	out	0x0a, r1	; 10
	PORTB |= 0x1f; // Set initial value of output port B
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8f 61       	ori	r24, 0x1F	; 31
  a2:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0x1f; // Set initial value of output port C
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	8f 61       	ori	r24, 0x1F	; 31
  a8:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PD2) | (1 << PD3); // Enable pullup resistor
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8c 60       	ori	r24, 0x0C	; 12
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <init_timer>:
}

void init_timer(void){
	// Configure timer interrupt
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  b2:	ef e6       	ldi	r30, 0x6F	; 111
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	TCNT1 = 0;	// Reset timer counter
  bc:	10 92 85 00 	sts	0x0085, r1
  c0:	10 92 84 00 	sts	0x0084, r1
	TCCR1B |= (1 << WGM12);	// Set to CTC mode on OCR1A
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10) | (1 << CS11);	// Set prescaler to 1/64
  ce:	80 81       	ld	r24, Z
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	80 83       	st	Z, r24
	OCR1A = 15624;			// Compare value of register
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	9d e3       	ldi	r25, 0x3D	; 61
  d8:	90 93 89 00 	sts	0x0089, r25
  dc:	80 93 88 00 	sts	0x0088, r24
  e0:	08 95       	ret

000000e2 <init_pin_interrupt>:
}

void init_pin_interrupt(void){
	// Configure interrupts on falling edge for INT0
	EICRA |= (1 << ISC01);
  e2:	e9 e6       	ldi	r30, 0x69	; 105
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
  ec:	80 81       	ld	r24, Z
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);		// Enable INT0 interrupt
  f2:	e8 9a       	sbi	0x1d, 0	; 29
	// Configure interrupts on falling edge for INT1
	EICRA |= (1 << ISC11);
  f4:	80 81       	ld	r24, Z
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC10);
  fa:	80 81       	ld	r24, Z
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);		// Enable INT0 interrupt
 100:	e9 9a       	sbi	0x1d, 1	; 29
 102:	08 95       	ret

00000104 <start_sleep>:
void init_sleep_mode(void){
	SMCR = 0x00;	// Set to idle mode
}

void start_sleep(void){
	SMCR |= (1 << SE);
 104:	83 b7       	in	r24, 0x33	; 51
 106:	81 60       	ori	r24, 0x01	; 1
 108:	83 bf       	out	0x33, r24	; 51
 10a:	08 95       	ret

0000010c <main>:
void start_sleep();


int main(void)
{
	init_ports();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <init_ports>
	init_timer();
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <init_timer>
	init_pin_interrupt();
 114:	0e 94 71 00 	call	0xe2	; 0xe2 <init_pin_interrupt>
	sei(); // Enable global interrupts
 118:	78 94       	sei
 
	while (1)
    {
		start_sleep();
 11a:	0e 94 82 00 	call	0x104	; 0x104 <start_sleep>
	}
 11e:	fd cf       	rjmp	.-6      	; 0x11a <main+0xe>

00000120 <__vector_1>:
ISR(TIMER1_COMPA_vect){
	++TIME;
	update_minutes();	
}

ISR(INT0_vect) {
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
	// Increase minutes
	TIME += 4;
 132:	80 91 04 01 	lds	r24, 0x0104
 136:	90 91 05 01 	lds	r25, 0x0105
 13a:	a0 91 06 01 	lds	r26, 0x0106
 13e:	b0 91 07 01 	lds	r27, 0x0107
 142:	04 96       	adiw	r24, 0x04	; 4
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 04 01 	sts	0x0104, r24
 14c:	90 93 05 01 	sts	0x0105, r25
 150:	a0 93 06 01 	sts	0x0106, r26
 154:	b0 93 07 01 	sts	0x0107, r27
}
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_2>:

ISR(INT1_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
	// Increase hours
	TIME += 10;
 17c:	80 91 04 01 	lds	r24, 0x0104
 180:	90 91 05 01 	lds	r25, 0x0105
 184:	a0 91 06 01 	lds	r26, 0x0106
 188:	b0 91 07 01 	lds	r27, 0x0107
 18c:	0a 96       	adiw	r24, 0x0a	; 10
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 04 01 	sts	0x0104, r24
 196:	90 93 05 01 	sts	0x0105, r25
 19a:	a0 93 06 01 	sts	0x0106, r26
 19e:	b0 93 07 01 	sts	0x0107, r27
}
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <update_minutes>:

void update_minutes(void){
	minutes_single = (TIME%60)%10;
 1b4:	60 91 04 01 	lds	r22, 0x0104
 1b8:	70 91 05 01 	lds	r23, 0x0105
 1bc:	80 91 06 01 	lds	r24, 0x0106
 1c0:	90 91 07 01 	lds	r25, 0x0107
 1c4:	2c e3       	ldi	r18, 0x3C	; 60
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__divmodsi4>
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__divmodsi4>
 1dc:	70 93 03 01 	sts	0x0103, r23
 1e0:	60 93 02 01 	sts	0x0102, r22
	// Check each bit in the single minutes
	// Minutes, single minutes
	(minutes_single & 0x01) ? (PORTB &= ~(1 << PB0)): (PORTB |= (1 << PB0)) ;
 1e4:	61 70       	andi	r22, 0x01	; 1
 1e6:	77 27       	eor	r23, r23
 1e8:	67 2b       	or	r22, r23
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <update_minutes+0x3c>
 1ec:	28 98       	cbi	0x05, 0	; 5
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <update_minutes+0x3e>
 1f0:	28 9a       	sbi	0x05, 0	; 5
	(minutes_single & 0x02) ? (PORTB &= ~(1 << PB1)) : (PORTB |= (1 << PB1));
 1f2:	80 91 02 01 	lds	r24, 0x0102
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <update_minutes+0x4a>
 1fa:	29 98       	cbi	0x05, 1	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <update_minutes+0x4c>
 1fe:	29 9a       	sbi	0x05, 1	; 5
	(minutes_single & 0x04) ? (PORTB &= ~(1 << PB2)) : (PORTB |= (1 << PB2));
 200:	80 91 02 01 	lds	r24, 0x0102
 204:	82 ff       	sbrs	r24, 2
 206:	02 c0       	rjmp	.+4      	; 0x20c <update_minutes+0x58>
 208:	2a 98       	cbi	0x05, 2	; 5
 20a:	01 c0       	rjmp	.+2      	; 0x20e <update_minutes+0x5a>
 20c:	2a 9a       	sbi	0x05, 2	; 5
	(minutes_single & 0x08) ? (PORTB &= ~(1 << PB3)) : (PORTB |= (1 << PB3));
 20e:	80 91 02 01 	lds	r24, 0x0102
 212:	83 ff       	sbrs	r24, 3
 214:	02 c0       	rjmp	.+4      	; 0x21a <update_minutes+0x66>
 216:	2b 98       	cbi	0x05, 3	; 5
 218:	01 c0       	rjmp	.+2      	; 0x21c <update_minutes+0x68>
 21a:	2b 9a       	sbi	0x05, 3	; 5
	// Minutes, tens of minutes
	minutes_tens = (TIME%60)/10;
 21c:	60 91 04 01 	lds	r22, 0x0104
 220:	70 91 05 01 	lds	r23, 0x0105
 224:	80 91 06 01 	lds	r24, 0x0106
 228:	90 91 07 01 	lds	r25, 0x0107
 22c:	2c e3       	ldi	r18, 0x3C	; 60
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__divmodsi4>
 238:	2a e0       	ldi	r18, 0x0A	; 10
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__divmodsi4>
 244:	30 93 01 01 	sts	0x0101, r19
 248:	20 93 00 01 	sts	0x0100, r18
	// Check each bit in tens of minutes
	// Minutes, least significant
	(minutes_tens & 0x01) ? (PORTC &= ~(1 << PC0)) : (PORTC |= (1 << PC0));
 24c:	21 70       	andi	r18, 0x01	; 1
 24e:	33 27       	eor	r19, r19
 250:	23 2b       	or	r18, r19
 252:	11 f0       	breq	.+4      	; 0x258 <update_minutes+0xa4>
 254:	40 98       	cbi	0x08, 0	; 8
 256:	01 c0       	rjmp	.+2      	; 0x25a <update_minutes+0xa6>
 258:	40 9a       	sbi	0x08, 0	; 8
	(minutes_tens & 0x02) ? (PORTC &= ~(1 << PC1)) : (PORTC |= (1 << PC1));
 25a:	80 91 00 01 	lds	r24, 0x0100
 25e:	81 ff       	sbrs	r24, 1
 260:	02 c0       	rjmp	.+4      	; 0x266 <update_minutes+0xb2>
 262:	41 98       	cbi	0x08, 1	; 8
 264:	01 c0       	rjmp	.+2      	; 0x268 <update_minutes+0xb4>
 266:	41 9a       	sbi	0x08, 1	; 8
	(minutes_tens & 0x04) ? (PORTC &= ~(1 << PC2)) : (PORTC |= (1 << PC2));
 268:	80 91 00 01 	lds	r24, 0x0100
 26c:	82 ff       	sbrs	r24, 2
 26e:	02 c0       	rjmp	.+4      	; 0x274 <update_minutes+0xc0>
 270:	42 98       	cbi	0x08, 2	; 8
 272:	08 95       	ret
 274:	42 9a       	sbi	0x08, 2	; 8
 276:	08 95       	ret

00000278 <__vector_11>:

void start_sleep(void){
	SMCR |= (1 << SE);
}

ISR(TIMER1_COMPA_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	++TIME;
 29a:	80 91 04 01 	lds	r24, 0x0104
 29e:	90 91 05 01 	lds	r25, 0x0105
 2a2:	a0 91 06 01 	lds	r26, 0x0106
 2a6:	b0 91 07 01 	lds	r27, 0x0107
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	a1 1d       	adc	r26, r1
 2ae:	b1 1d       	adc	r27, r1
 2b0:	80 93 04 01 	sts	0x0104, r24
 2b4:	90 93 05 01 	sts	0x0105, r25
 2b8:	a0 93 06 01 	sts	0x0106, r26
 2bc:	b0 93 07 01 	sts	0x0107, r27
	update_minutes();	
 2c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <update_minutes>
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__divmodsi4>:
 2e6:	05 2e       	mov	r0, r21
 2e8:	97 fb       	bst	r25, 7
 2ea:	1e f4       	brtc	.+6      	; 0x2f2 <__divmodsi4+0xc>
 2ec:	00 94       	com	r0
 2ee:	0e 94 8a 01 	call	0x314	; 0x314 <__negsi2>
 2f2:	57 fd       	sbrc	r21, 7
 2f4:	07 d0       	rcall	.+14     	; 0x304 <__divmodsi4_neg2>
 2f6:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
 2fa:	07 fc       	sbrc	r0, 7
 2fc:	03 d0       	rcall	.+6      	; 0x304 <__divmodsi4_neg2>
 2fe:	4e f4       	brtc	.+18     	; 0x312 <__divmodsi4_exit>
 300:	0c 94 8a 01 	jmp	0x314	; 0x314 <__negsi2>

00000304 <__divmodsi4_neg2>:
 304:	50 95       	com	r21
 306:	40 95       	com	r20
 308:	30 95       	com	r19
 30a:	21 95       	neg	r18
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	4f 4f       	sbci	r20, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255

00000312 <__divmodsi4_exit>:
 312:	08 95       	ret

00000314 <__negsi2>:
 314:	90 95       	com	r25
 316:	80 95       	com	r24
 318:	70 95       	com	r23
 31a:	61 95       	neg	r22
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	08 95       	ret

00000324 <__udivmodsi4>:
 324:	a1 e2       	ldi	r26, 0x21	; 33
 326:	1a 2e       	mov	r1, r26
 328:	aa 1b       	sub	r26, r26
 32a:	bb 1b       	sub	r27, r27
 32c:	fd 01       	movw	r30, r26
 32e:	0d c0       	rjmp	.+26     	; 0x34a <__udivmodsi4_ep>

00000330 <__udivmodsi4_loop>:
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	ee 1f       	adc	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	a2 17       	cp	r26, r18
 33a:	b3 07       	cpc	r27, r19
 33c:	e4 07       	cpc	r30, r20
 33e:	f5 07       	cpc	r31, r21
 340:	20 f0       	brcs	.+8      	; 0x34a <__udivmodsi4_ep>
 342:	a2 1b       	sub	r26, r18
 344:	b3 0b       	sbc	r27, r19
 346:	e4 0b       	sbc	r30, r20
 348:	f5 0b       	sbc	r31, r21

0000034a <__udivmodsi4_ep>:
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	1a 94       	dec	r1
 354:	69 f7       	brne	.-38     	; 0x330 <__udivmodsi4_loop>
 356:	60 95       	com	r22
 358:	70 95       	com	r23
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
 362:	bd 01       	movw	r22, r26
 364:	cf 01       	movw	r24, r30
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
